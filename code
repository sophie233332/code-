// hardware part :D

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.util.ElapsedTime;

public abstract class hardwareprobablyidk extends OpMode{

    // mi front, m2 right, m3 back, m4 left

    DcMotor m1Front = null;
    DcMotor m2Right = null;
    DcMotor m3Back = null;
    DcMotor m4Left = null;
    HardwareMap hwMap = null;
    private ElapsedTime period = new ElapsedTime();

    public hardwareprobablyidk(){

    }
    public void init(){

        m1Front = hwMap.dcMotor.get("m1");
        m2Right = hwMap.dcMotor.get("m2");
        m3Back = hwMap.dcMotor.get("m3");
        m4Left = hwMap.dcMotor.get("m4");

        m1Front.setPower(0);
        m2Right.setPower(0);
        m3Back.setPower(0);
        m4Left.setPower(0);

        m1Front.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        m2Right.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        m3Back.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        m4Left.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

    }


}


//teleop part


package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.HardwareMap;


@TeleOp(name="Testbot: Telop ", group="Testbot")

public abstract class K9botTeleopTank_Linear extends LinearOpMode {


    /* Declare OpMode members. */
    hardwareprobablyidk  robot = new hardwareprobablyidk();


    @Override
    public void runOpMode() {
        double frontbackpower;
        double leftrightpower;
        double spinpower;

        /* Initialize the hardware variables.
         * The init() method of the hardware class does all the work here
         */
        robot.init(HardwareMap);

        // Send telemetry message to signify robot waiting;
        telemetry.addData("Say", "Hello Driver");    //
        telemetry.update();

        // Wait for the game to start (driver presses PLAY)
        waitForStart();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {
            
            spinpower = -gamepad1.right_stick_x;
            
            if (Math.abs(spinpower) > .1){
                robot.m1Front.setPower(spinpower);
                robot.m2Right.setPower(spinpower);
                robot.m3Back.setPower(spinpower);
                robot.m4Left.setPower(spinpower);
            }
            else {


                // Run wheels in tank mode (note: The joystick goes negative when pushed forwards, so negate it)
                frontbackpower = -gamepad1.left_stick_y;
                leftrightpower = -gamepad1.left_stick_x;
                
                telemetry.addData("x", "%.2f", -gamepad1.left_stick_x);
                telemetry.addData("y", "%.2f", -gamepad1.left_stick_y);

                
                robot.m1Front.setPower(leftrightpower);
                robot.m2Right.setPower(frontbackpower);
                robot.m3Back.setPower(leftrightpower);
                robot.m4Left.setPower(frontbackpower);

            }

            telemetry.update();

            // Pause for 40 mS each cycle = update 25 times a second.
            sleep(40);
        }
    }
}
